(env-data { "module-admin-keyset": { "keys": ["admin"], "pred": "keys-all"}})
(env-keys ["admin"])

;---------------------------------
;      Admin keyset
;---------------------------------
(begin-tx "keyset definition")
(define-keyset 'cp-module-admin
  (read-keyset "module-admin-keyset"))
(commit-tx)

;---------------------------------
;      Cash Workflow Logic
;---------------------------------
(begin-tx "cash module")
(module cash 'cp-module-admin

  (defrecord entry
    [^string ccy
    ^decimal balance
    ^decimal change
    ^time date])

  (deftable ^{entry} cash)

  (defn debit [id amount date]
    "Debit ID for AMOUNT, checking balance for available funds"
    (with-read cash id { balance "balance" }
      (enforce (>= balance amount) "Insufficient funds")
      (update cash id {
        "balance" (- balance amount),
        "change" (- amount),
        "date" date
        })))

  (defn credit [id amount date]
    "Credit ID with AMOUNT"
    (with-read cash id { balance "balance" }
      (update cash id {
        "balance": (+ balance amount),
        "change": amount,
        "date": date
        })))

  (defn make-payment [payor payee amount date]
    "Debit PAYOR and credit PAYEE AMOUNT"
    (debit payor amount date)
    (credit payee amount date))

  (defn create-account [id ccy amount date]
    "Create account ID for CCY and fund with AMOUNT"
    (insert cash id {
            "ccy" ccy,
            "balance" amount,
            "change" amount,
            "date" date }))

  (defn read-account [id] (read cash id)))

(create-table cash)
(commit-tx)

;---------------------------------
;      Orders Workflow Logic
;---------------------------------
(begin-tx "orders module")
(module orders 'cp-module-admin
  (defrecord order
    [^string cusip
    ^string buyer
    ^string seller
    ^decimal price
    ^integer qty
    ^string ccy
    ^time order-date
    ^string status
    ^time modify-date])

  (deftable ^{order} cp-orders)


  (def ORDER_NEW "NEW")
  (def ORDER_FILLED "FILLED")
  (def ORDER_CANCELED "CANCELED")
  (def ORDER_PAID "PAID")

  (defn new-order [order-id cusip buyer seller qty price ccy date]
    "Create new order ORDER-ID"
    (insert cp-orders order-id {
            "cusip" cusip,
            "buyer" buyer,
            "seller" seller,
            "price" price,
            "qty" qty,
            "ccy" ccy,
            "order-date" date,
            "status" ORDER_NEW,
            "modify-date" date}))

  (defn read-order [order-id] (read cp-orders order-id))

  (defn update-order-status [order-id status date]
    (enforce (or (= ORDER_NEW status)
                 (or (= ORDER_FILLED status)
                     (or (= ORDER_CANCELED status)
                         (= ORDER_PAID status))))
             "Invalid status")
    (update cp-orders order-id
            { "status" status "modify-date" date }))

  (defn with-order-status [order-id status]
    "Check that order status is correct, returning details"
    (with-read cp-orders order-id {
               cusip "cusip"
               ostatus "status"
               qty "qty"
               price "price"
               seller "seller"
               buyer "buyer"}
               (enforce (= ostatus status) (format "order must be {}" [status]))
               {cusip "cusip"
               qty "qty"
               price "price"
               buyer "buyer"
               seller "seller" }))

  (defn with-order [order-id]
    "Get order details"
    (read cp-orders order-id))

  (defn cancel-order [order-id date]
    (with-read cp-orders order-id { status "status" }
               (enforce (= ORDER_NEW status) "only NEW orders can be canceled")
               (update-order-status order-id ORDER_CANCELED))))

(create-table cp-orders)
(commit-tx)

;---------------------------------
; Commercial Paper Workflow Logic
;---------------------------------
(begin-tx "cp module")
(use orders)
(use cash)
(module cp 'cp-module-admin

  (defrecord cp-asset
    [^string ticker
    ^string issuer
    ^decimal future-value
    ^decimal discount-rate
    ^integer maturity
    ^decimal par
    ^decimal discount
    ^decimal cost
    ^time trade-date
    ^time settlement-date])

  (deftable ^{cp-asset} cp-master)

  (defrecord inventory
    [^integer qty
    ^decimal price
    ^time date])

  (deftable ^{inventory} cp-inventory)

  (defn issue [issuer cusip ticker future-value discount-rate days-to-maturity par date]
    "ISSUER issues CUSIP with specified values, computing discount, cost, settlement date"
    (enforce (> future-value 0.0) "Valid future-value")
    (enforce (and (>= discount-rate 0.0)
                  (< discount-rate 100.0))
             "Valid discount-rate")
    (enforce (> days-to-maturity 0) "Valid days-to-maturity")
    (let ((discount (calculate-discount future-value
                                         discount-rate days-to-maturity))
           (cost (- future-value discount))
           (settlement-date (add-time date (days days-to-maturity))))
      (insert cp-master cusip
              {
              "ticker" ticker,
              "issuer" issuer,
              "future-value" future-value
              "discount-rate" discount-rate
              "maturity" days-to-maturity
              "par" par
              "discount" discount
              "cost" cost
              "trade-date" date
              "settlement-date" settlement-date
              })
      (issue-inventory issuer cusip 1 cost date)
      (format "Issued {}/{} with discount {}, cost {}, settlement date {}"
              [ticker cusip discount cost settlement-date])))

  (defn inventory-key [owner cusip]
    "Make composite key from OWNER and CUSIP"
    (format "{}:{}" [owner cusip]))

  (defn issue-inventory [owner cusip qty price date]
    "Issue inventory for CUSIP recording QTY and PRICE held by OWNER"
    (insert cp-inventory (inventory-key owner cusip)
            {
            "qty" qty
            "price" price
            "date" date
            }))

  (defn transfer-inventory [owner cusip transferee qty price date]
    "Transfer CUSIP QTY from OWNER to TRANSFEREE, confirming PRICE"
    (let ((owner-key (inventory-key owner cusip))
          (transferee-key (inventory-key transferee cusip)))
      (with-read cp-inventory owner-key
        { owner-owned "qty"
          owner-price "price" }
        (enforce (>= owner-owned qty) "Owner has inventory")
        (enforce (= owner-price price) "Price matches inventory")
        (with-default-read cp-inventory transferee-key
          { "qty": 0 }
          { "qty" := transferee-owned }
          (update cp-inventory owner-key
                  { "qty": (- owner-owned qty),
                  "date": date })
          (write cp-inventory transferee-key
                 { "qty": (+ transferee-owned qty),
                 "date": date,
                 "price": price })))))

  (defn calculate-discount [future-value discount-rate days-to-maturity]
    (* future-value
       (* (/ discount-rate 100.0)
          (/ days-to-maturity 360.0))))

  (defn fill-order-transfer [order-id seller date]
    "Fill new order ORDER-ID"
    (bind (with-order-status order-id ORDER_NEW) {
      "cusip" := cusip,
      "qty" := qty,
      "price" := price,
      "buyer" := buyer,
      "seller" := order-seller
      }
      (enforce (= order-seller seller) "Seller must match order seller")
      (transfer-inventory seller cusip buyer qty price date)
      (update-order-status order-id ORDER_FILLED date)))

  (defn settle-order [order-id cusip buyer seller date]
    "Open settlement, with payment and status update"
    (bind (with-order-status order-id ORDER_FILLED) {
      "price" := price
      }
      (make-payment buyer seller price date)
      (update-order-status order-id ORDER_PAID date)))

  (defn settle-order-buyer [order-id buyer date]
    "Private settlement, debit step"
    (bind (with-order-status order-id ORDER_FILLED) {
      "price" := price
      }
      (debit buyer price date)))

  (defn refund-order [order-id buyer date]
    "Private settlement, rollback debit step"
    (bind (with-order order-id) { "price" := price }
          (credit buyer price date)))

  (defn settle-order-seller [order-id seller date]
    "Private settlement, credit and status update"
    (bind (with-order order-id) { "price" := price }
          (credit seller price date)
          (update-order-status order-id ORDER_PAID date)))


  (defn read-cp-master [cusip] (read cp-master cusip))

  (defn read-inventory [owner cusip]
    (read cp-inventory (inventory-key owner cusip)))

  ;; scenario1
  (defpact issue-order-fill-settle (agent-entity trader-entity
                      agent trader cusip ticker future-value discount-rate
                      days-to-maturity par order-id date)
    ;; 0: issuance
    (step agent-entity
      (issue agent cusip ticker future-value discount-rate
             days-to-maturity par date))
    ;; 1: new order
    (step-with-rollback trader-entity
      (new-order order-id cusip trader agent 1
          (at "cost" (read-cp-master cusip)) "USD" date)
      ;;rollback
      (cancel-order order-id date))

    ;; 2: fill
    (step agent-entity
      (fill-order-transfer order-id agent date))

    ;; 3: pay
    (step-with-rollback trader-entity
      (settle-order-buyer order-id trader date)
      ;;rollback
      (refund-order order-id trader date))

    ;; 4: settle
    (step agent-entity
      (settle-order-seller order-id agent date))
  )
)

(create-table cp-master)
(create-table cp-inventory)
(commit-tx)

;---------------------------------
;      REPL Code portion
;---------------------------------

(use cp)
(use cash)
(use orders)

(module cp-test 'cp-module-admin
  (def t1 (time "2016-09-01T11:00:00Z"))
  (def t2 (add-time t1 30))
  (def t3 (add-time t2 30))
  (defn runpact-scenario-1 [order-id cusip]
    (issue-order-fill-settle
     "AGENT" "TRADER" "agent" "trader" cusip "GE CP"
     100000.0 7.35 30 1000.0 order-id t1)
    )
)


(create-account "agent" "USD" 0.0 t1)
(create-account "trader" "USD" 100000.0 t1)

(issue "agent" "cusip1" "GE CP" 100000.0 7.35 30 1000.0 t1)
(expect "agent has inventory" 1 (at "qty" (read-inventory "agent" "cusip1")))


(new-order "order1" "cusip1" "trader" "agent" 1 99387.5 "USD" t1)

(fill-order-transfer "order1" "agent" t2)

(expect "order record correct"
  {"cusip": "cusip1", "buyer": "trader", "seller": "agent", "price": 99387.5,
  "qty": 1, "ccy": "USD", "order-date": t1,
  "status": ORDER_FILLED, "modify-date": t2}
  (read-order "order1"))

(expect "agent inventory" 0 (get (read-inventory "agent" "cusip1") "qty"))
(expect "trader inventory" 1 (get (read-inventory "trader" "cusip1") "qty"))

(settle-order "order1" "cusip1" "trader" "agent" t3)
(expect "trader balance" 612.5 (get (read-account "trader") "balance"))
(expect "agent balance" 99387.5 (get (read-account "agent") "balance"))
(expect "order paid" ORDER_PAID (get (read-order "order1") "status"))

(read-cp-master "cusip1")
